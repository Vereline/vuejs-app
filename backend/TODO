DATABASE_URL=postgres://[username]:[password]@0.0.0.0:5432/vuejs_app
DEBUG=True
BASE_URL=http://localhost:8000
PORT=8000
HOSTNAME=localhost
SECRET_KEY=0(83fl2^yjkcgb+n-s^&80^4t62c3l1zbqso6w&!bnscjt8q52
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'abcd@gmail.com'
EMAIL_HOST_PASSWORD = 'password'
EMAIL_PORT = 587

Django admin:
Username: admin
Password: admin
All other data in admin panel

GraphQL for Django
https://docs.graphene-python.org/projects/django/en/latest/installation/

API GraphQl Django
https://stackabuse.com/building-a-graphql-api-with-django/


# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)
#
#     Merge Query:  Shift-Ctrl-M (or press the merge button above)
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#


https://github.com/davedodea/FlaskBook

cuisine -> menu(s) -> recipes -> ingredients



#
# This file is autogenerated by pip-compile
# To update, run:
#
#    pip-compile --output-file requirements.txt requirements.in
#
https://github.com/davesque/django-rest-framework-simplejwt (old jwt library is old and expired)


Update pip packages

pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U

Do both QraphQl and DRF queries
https://github.com/axnsan12/drf-yasg/
https://drf-yasg.readthedocs.io/en/stable/


Queries
tokenAuth to authenticate the user and obtain a JSON Web Token and Refresh Token:

mutation TokenAuth($username: String!, $password: String!) {
  tokenAuth(username: $username, password: $password) {
    token
    payload
    refreshToken
    refreshExpiresIn
  }
}
refreshToken to refresh your token, using the refreshToken you already got during authorization:

mutation RefreshToken($refreshToken: String!) {
  refreshToken(refreshToken: $refreshToken) {
    token
    payload
    refreshToken
    refreshExpiresIn
  }
}
revokeToken to revoke a valid refreshToken. The invalidation takes place immediately, and the refreshToken cannot be used again after the revocation:

mutation RevokeToken($refreshToken: String!) {
  revokeToken(refreshToken: $refreshToken) {
    revoked
  }
}


Per-cookie
When a refresh token is requested and jwt_cookie decorator is set, the response will set the given cookie with the refresh token string.

Unlimited refresh
Configure the JWT_REFRESH_EXPIRED_HANDLER setting that checks if the refresh token is expired:

GRAPHQL_JWT = {
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LONG_RUNNING_REFRESH_TOKEN': True,
    'JWT_REFRESH_EXPIRED_HANDLER': lambda orig_iat, context: False,
}
One time only use refresh token
Automatically revoke a refresh token after it has been used:

from django.dispatch import receiver

from graphql_jwt.refresh_token.signals import refresh_token_rotated


@receiver(refresh_token_rotated)
def revoke_refresh_token(sender, request, refresh_token, **kwargs):
    refresh_token.revoke(request)
Clear refresh tokens
Command.handle(expired, *args, **options)[source]
The actual logic of the command. Subclasses must implement this method.

Delete revoked refresh tokens with cleartokens command.

$ python manage.py cleartokens --help

usage: cleartokens [--expired]

optional arguments:
  --expired             Clears expired tokens
The --expired argument allows the user to remove those refresh tokens whose lifetime is greater than the amount specified by JWT_REFRESH_EXPIRATION_DELTA setting.



mutation addComment($text: String!, $blogPostId: Int!, $authorId: Int!) {
  addComment(input: {
    text: $text,
    blogPost: {
        id: $blogPostId
      }
    author: {
        id: $authorId
      }
  }) {
    ok
}

{
    "firstName": "Asd1",
    "lastName": "Asd1",
    "username": "AsdAsd1",
    "email": "As1d@asd.asd"
}

Test gql image upload

curl localhost:8000/file-graphql
-F operations='{ "query": "mutfilePhoto(file: $file, id: $id) { success } }", "variables": { "file": null, "id": "2" } }'
-F map='{ "0": ["variables.file"] }'
-F 0=@1.txt

curl localhost:8000/file-graphql -F operations='{ "query": "mutation($file: Upload!, $id: String!) {  uploadProfilePhoto (file: $file, id: $id) { success } }", "variables": { "file": null, "id": "2" } }' -F map='{ "0": ["variables.file"] }' -F 0=@1.txt


{"data":{"uploadProfilePhoto":{"success":true}}}

# simple API client for testing???
https://github.com/graphql-python/graphene-django/blob/master/graphene_django/tests/test_views.py